{"version":3,"sources":["components/Table.tsx","components/TableInterface.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Table","list","className","map","item","src","owner","avatar_url","alt","name","href","html_url","description","id","TableInterface","useState","value","setValue","page","setPage","listOfCurrentPage","filter","includes","slice","placeholder","onChange","e","target","length","onClick","disabled","App","setList","useEffect","fetch","then","response","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAiCeA,EAzBmB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnC,OACE,qBAAKC,UAAU,QAAf,SACE,gCACE,kCACE,+BACE,uCACA,sCACA,qCACA,gDAEDD,EAAKE,KAAI,SAACC,GAAD,OACR,+BACE,6BAAI,qBAAKC,IAAKD,EAAKE,MAAMC,WAAYC,IAAI,SAASN,UAAU,aAC5D,6BAAKE,EAAKK,OACV,6BAAI,mBAAGC,KAAMN,EAAKO,SAAUT,UAAU,OAAlC,SAA0CE,EAAKO,aACnD,6BAAKP,EAAKQ,gBAJHR,EAAKS,eCqCXC,EAhDqC,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACrD,EAA0Bc,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAQMC,EADenB,EAAKoB,QAAO,SAACjB,GAAD,OAAeA,EAAKK,KAAKa,SAASN,MAC5BO,MAAa,GAAPL,EAAkB,GAAPA,EAAY,IAEpE,OACE,sBAAKhB,UAAU,kBAAf,UACE,gCACE,4CACA,uBACEc,MAAOA,EACPQ,YAAY,GACZC,SAfa,SAACC,GACpBT,EAASS,EAAEC,OAAOX,OAClBG,EAAQ,IAcFjB,UAAU,aAIbkB,EAAkBQ,OAAS,EACxB,cAAC,EAAD,CAAO3B,KAAMmB,IACb,0CAGJ,gCACE,wBACES,QAAS,kBAAMV,EAAQD,EAAO,IAC9BY,SAAmB,IAATZ,EACVhB,UAAU,SAHZ,oBAMA,qCAAQgB,EAAO,EAAf,OAEA,wBACEW,QAAS,kBAAMV,EAAQD,EAAO,IAC9BY,SAAUV,EAAkBQ,OAAS,GACrC1B,UAAU,SAHZ,2BC1BO6B,EAhBH,WACV,MAAwBhB,mBAAgC,IAAxD,mBAAOd,EAAP,KAAa+B,EAAb,KAQA,OANAC,qBAAU,WACRC,MAAM,uCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAAQM,QACvB,IAGD,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,CAAgBD,KAAMA,OCFbsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6087fe08.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport '../App.css';\nimport { RepositoryType } from '../types';\n\ninterface TablePropsType {\n  list: RepositoryType[]\n}\n\nconst Table: FC<TablePropsType> = ({ list }) => {\n  return (\n    <div className=\"table\">\n      <table> \n        <tbody>\n          <tr>\n            <th>Owner</th>\n            <th>Name</th>\n            <th>Url</th>\n            <th>Description</th>\n          </tr>\n          {list.map((item: RepositoryType) => (\n            <tr key={item.id} >\n              <td><img src={item.owner.avatar_url} alt=\"avatar\" className=\"avatar\" /></td>\n              <td>{item.name}</td>\n              <td><a href={item.html_url} className=\"link\">{item.html_url}</a></td>\n              <td>{item.description}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { useState, FC } from 'react';\nimport '../App.css';\nimport { RepositoryType } from '../types';\nimport Table from './Table';\n\ninterface TableInterfacePropsType {\n  list: RepositoryType[];\n}\n\nconst TableInterface: FC<TableInterfacePropsType> = ({ list }) => {\n  const [value, setValue] = useState('');\n  const [page, setPage] = useState(0);\n\n  const handleChange = (e: any) => {\n    setValue(e.target.value);\n    setPage(0);\n  };\n\n  const filteredList = list.filter((item: any) => item.name.includes(value));\n  const listOfCurrentPage = filteredList.slice(page * 10, page * 10 + 10);\n\n  return (\n    <div className=\"table-interface\">\n      <div>\n        <span>Search: </span>\n        <input\n          value={value}\n          placeholder=''\n          onChange={handleChange}\n          className=\"input\"\n        />\n      </div>\n\n      {listOfCurrentPage.length > 0 \n        ? <Table list={listOfCurrentPage} /> \n        : <div>No Data</div>\n      }\n\n      <div>\n        <button\n          onClick={() => setPage(page - 1)}\n          disabled={page === 0} \n          className=\"button\"\n        >&lArr;</button>\n\n        <span> {page + 1} </span>\n\n        <button\n          onClick={() => setPage(page + 1)}\n          disabled={listOfCurrentPage.length < 10}\n          className=\"button\"\n        >&rArr;</button>\n      </div>\n    </div>\n  );\n};\n\nexport default TableInterface;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TableInterface from './components/TableInterface';\nimport { RepositoryType } from './types';\n\nconst App = () => {\n  const [list, setList] = useState<RepositoryType[] | []>([]);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/repositories\")\n      .then(response => response.json())\n      .then(data => setList(data))\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TableInterface list={list} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}